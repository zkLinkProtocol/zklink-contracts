const { expect } = require('chai');
const { BigNumber } = require("ethers");
const hardhat = require("hardhat");

describe('Verifier unit tests', function () {
    let verifier;
    before(async () => {
        const verifierFactory = await hardhat.ethers.getContractFactory('Verifier');
        verifier = await verifierFactory.deploy();
    });

    it('verify gggregated block proof should success', async () => {
        let _proof = {
            recursiveInput: [
                BigInt("419677603415751010543046694216861168897793696682748438237227036798995564786")
            ],
            proof:[
                BigInt("19486615556134790294101282842511578125911600601638271936163609588748735271486"),
                BigInt("13578433002005982111648517686622689730307458361777254376934500836886797850105"),
                BigInt("10525895957087781469922664157346244854372570062025110134240366739722873492018"),
                BigInt("6598729692522500417343935947202957106446767031866527353821036042562850212993"),
                BigInt("10024030969911643905784947558215223947827743599360599284678794571586792698623"),
                BigInt("13117790217645948585186109110138569125656109357812500433347511969292079433217"),
                BigInt("14898207097052103863013905700713183149694477396540861416071083140555068666162"),
                BigInt("10709403054879840393440903156430854281246005473540029816477846810235910929966"),
                BigInt("10573501481747910593939571866144820490128014557381686841922582565814809305528"),
                BigInt("7947652356154195440483827869363847529997823169876410268324736643085714542648"),
                BigInt("5902452419114253180715086530981700845334955186148090782957215247054679683860"),
                BigInt("18655680020252039789786417872834011109021496927697710413161380672310230068122"),
                BigInt("14785766832090180261051471153423263015135912699467258887760051970993523969084"),
                BigInt("5637938403638929799139074624699914640792662200801121767354283120204837190916"),
                BigInt("7188230382609817200496258532627422638935924490020303644480295898366519290179"),
                BigInt("12984510860375922490199754964695803554208484029597851102555161990759157371013"),
                BigInt("18935809265959134879728894695950525404916920389870764636985991262389129086290"),
                BigInt("18644946167976425778420722344658031808746515793271434559752216130921346570327"),
                BigInt("10992718264986308785187632747184962868249479488929281900427005707535517727874"),
                BigInt("16655499981238550605665829077137796633742703738005534801002811491747298108513"),
                BigInt("14297683462093681894691361459083467979801321565072268492494058084574843126068"),
                BigInt("10189489417273218264047310542282381231505905555677043930183789207264702010855"),
                BigInt("10100760055237012684313311788718365109379995655896040426683374810602193892836"),
                BigInt("10980923913866943511331569890362154632887403200736180266365101117447525491460"),
                BigInt("10229634028765251198473488943705438256609036125001550306485994216415247684890"),
                BigInt("577110835343691533731919172725918899578701797779702765779402761733278275294"),
                BigInt("16653125809496172559192432081492026166934711979557566390723298628467974248108"),
                BigInt("318228218879071135740549704157395345740954008763396077890556021782683290909"),
                BigInt("13662675655469381722254953609908177730180713658163053607240715125325800612018"),
                BigInt("19256333320628940034191263710093762056312568779545957684796365284923725325620"),
                BigInt("3213700099058077027927244889326043389102682227792121517355435844339943277137"),
                BigInt("18681783291450329982701322624564603303103765844325572600678391244768735188491"),
                BigInt("5672466457673221638076241548309353530659734473378014835327422230835658564572"),
                BigInt("17276402788205493620767107767855993391003842700724712966471425203410290249601"),
            ],
            commitments:[
                BigInt("11648650371413193185315040493088702705613641746362788042742061625763085116501"),
                BigInt("9324595572265634142613217894866288349042253503331249643448016481366309214747"),
                BigInt("5502408353821133584759762565454032790213855157256917512080569840031184862369"),
                BigInt("13586767454294019856647880687061020974643987813883668989205380864247519265450"),
            ],
            vkIndexes: [ 0, 0, 2, 2 ],
            subproofsLimbs: [
                BigInt("230856937446521416213"),
                BigInt("294275801690920549537"),
                BigInt("51205152688462124999"),
                BigInt("785560160000218"),
                BigInt("115614729814030381128"),
                BigInt("129712188290360159251"),
                BigInt("36103478593267717445"),
                BigInt("603303054495509"),
                BigInt("206479719181154340772"),
                BigInt("263643108203484283615"),
                BigInt("152933702597664052655"),
                BigInt("24141586126922"),
                BigInt("16209064316716427495"),
                BigInt("180152222549864167814"),
                BigInt("65247077175298316090"),
                BigInt("168238866116540"),
            ]
        };
        expect(await verifier.verifyAggregatedBlockProof(
            _proof.recursiveInput,
            _proof.proof,
            _proof.vkIndexes,
            _proof.commitments,
            _proof.subproofsLimbs)).to.eq(true);
    });
});
